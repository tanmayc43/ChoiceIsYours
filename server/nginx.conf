# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=main:10m rate=5r/s;

# Real IP configuration (for when you add CDN/proxy later)
# Uncomment and configure when adding Cloudflare or similar:
# real_ip_header X-Forwarded-For;
# set_real_ip_from 173.245.48.0/20;  # Cloudflare IPs
# set_real_ip_from 103.21.244.0/22;  # Cloudflare IPs
# set_real_ip_from 103.22.200.0/22;  # Cloudflare IPs
# set_real_ip_from 103.31.4.0/22;    # Cloudflare IPs
# set_real_ip_from 141.101.64.0/18;  # Cloudflare IPs
# set_real_ip_from 108.162.192.0/18; # Cloudflare IPs
# set_real_ip_from 190.93.240.0/20;  # Cloudflare IPs
# set_real_ip_from 188.114.96.0/20;  # Cloudflare IPs
# set_real_ip_from 197.234.240.0/22; # Cloudflare IPs
# set_real_ip_from 198.41.128.0/17;  # Cloudflare IPs
# set_real_ip_from 162.158.0.0/15;   # Cloudflare IPs
# set_real_ip_from 104.16.0.0/13;    # Cloudflare IPs
# set_real_ip_from 104.24.0.0/14;    # Cloudflare IPs
# set_real_ip_from 172.64.0.0/13;    # Cloudflare IPs
# set_real_ip_from 131.0.72.0/22;    # Cloudflare IPs

# CORS configuration map (comprehensive for Netlify)
map $http_origin $cors_origin {
    default "";
    
    # Production Netlify domains
    "https://thechoiceisyours.netlify.app" "https://thechoiceisyours.netlify.app";
    "https://www.thechoiceisyours.netlify.app" "https://www.thechoiceisyours.netlify.app";
    
    # Netlify deploy previews (add your specific preview URLs)
    "https://deploy-preview-123--thechoiceisyours.netlify.app" "https://deploy-preview-123--thechoiceisyours.netlify.app";
    "https://deploy-preview-456--thechoiceisyours.netlify.app" "https://deploy-preview-456--thechoiceisyours.netlify.app";
    
    # Netlify branch deployments (add your specific branch URLs)
    "https://develop--thechoiceisyours.netlify.app" "https://develop--thechoiceisyours.netlify.app";
    "https://staging--thechoiceisyours.netlify.app" "https://staging--thechoiceisyours.netlify.app";
    
    # Custom domains (add when you get them)
    # "https://thechoiceisyours.com" "https://thechoiceisyours.com";
    # "https://www.thechoiceisyours.com" "https://www.thechoiceisyours.com";
}

# Connection upgrade mapping for WebSockets
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name _;
    
    # Basic security headers (apply to all responses)
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Main application routes
    location / {
        # CORS headers
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Security headers (tightened CSP)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'nonce-${request_id}'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; object-src 'none'; base-uri 'self'; form-action 'self';" always;
        
        # Rate limiting for main routes
        limit_req zone=main burst=10 nodelay;
        
        # Handle OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }
    
    # API endpoints with stricter rate limiting
    location /api/ {
        # CORS headers
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Security headers (stricter CSP for API)
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'none'; connect-src 'self';" always;
        
        # Stricter rate limiting for API
        limit_req zone=api burst=20 nodelay;
        
        # Handle OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }
    
    # Health check endpoint with access control
    location /health {
        # Allow only localhost and internal network
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://localhost:3000;
        access_log off;
        
        # No CORS headers needed for health checks
        # Minimal security headers
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Comprehensive error handling with JSON responses
    error_page 400 401 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /error.json;
    
    location = /error.json {
        internal;
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin $cors_origin always;
        
        # Return appropriate error based on status
        if ($status = 400) { return 400 '{"error": "Bad Request", "status": 400, "message": "The request could not be understood"}'; }
        if ($status = 401) { return 401 '{"error": "Unauthorized", "status": 401, "message": "Authentication required"}'; }
        if ($status = 403) { return 403 '{"error": "Forbidden", "status": 403, "message": "Access denied"}'; }
        if ($status = 404) { return 404 '{"error": "Not Found", "status": 404, "message": "The requested resource was not found"}'; }
        if ($status = 405) { return 405 '{"error": "Method Not Allowed", "status": 405, "message": "The HTTP method is not allowed"}'; }
        if ($status = 429) { return 429 '{"error": "Too Many Requests", "status": 429, "message": "Rate limit exceeded"}'; }
        if ($status = 500) { return 500 '{"error": "Internal Server Error", "status": 500, "message": "An internal server error occurred"}'; }
        if ($status = 502) { return 502 '{"error": "Bad Gateway", "status": 502, "message": "Bad gateway"}'; }
        if ($status = 503) { return 503 '{"error": "Service Unavailable", "status": 503, "message": "Service temporarily unavailable"}'; }
        if ($status = 504) { return 504 '{"error": "Gateway Timeout", "status": 504, "message": "Gateway timeout"}'; }
        
        # Default error
        return 500 '{"error": "Internal Server Error", "status": 500, "message": "An unexpected error occurred"}';
    }
    
    # Enhanced Gzip compression including all relevant types
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types 
        text/plain 
        text/css 
        text/html
        text/xml 
        text/javascript 
        application/javascript 
        application/json
        application/xml
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Additional security headers for all responses
    add_header X-Download-Options "noopen" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header X-Content-Type-Options "nosniff" always;
} 